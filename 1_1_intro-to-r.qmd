---
format: 
  html: 
    lightbox: true
  revealjs: 
    output-file: 1_1_intro-to-r_presentation.html
---

# Introduction to R and RStudio

## Why R?

::: {.content-hidden when-format="revealjs"}
R is a coding language specialized for statistical computing and data analysis. It is free and open-source (though there is a cloud-based version which can be paid for and can have advantages especially in the classroom).
:::

Some of R's capabilities:

-   Import and create data files in various formats

-   Clean and organize data

-   Analyze and visualize the data

-   Communicate the results in various formats (pdf research paper, website, presentation slides)

-   Generate random data, execute functions repeatedly, useful for simulations, bootstrapping etc

-   Other programmatic tasks, e.g. web-scraping, using APIs

## The general workflow

### Separation of data and code

::: {.content-hidden when-format="revealjs"}
It might seem daunting to learn R if you have no experience with coding, but the basic idea is that you have some data, like you are familiar with from a regular Excel or Google Sheets spreadsheet, and you perform operations on your data using functions a lot like you would in Excel/Sheets. For example, you might compute an average in Sheets by typing `=AVERAGE(A1:A10)`. In R you might type `mean(my_data$column_a)`. The specifics of the function names are different, but the basic idea is the same.

A major difference between working with data in Excel vs. R is the separation of data from code. Rather than writing functions to manipulate or analyze data directly in your spreadsheet, code is written in a separate code file, which references **but does not modify** the source data file (unless you tell it to).
:::

:::::::::: {.columns style="display: flex; align-items: stretch; align-content: center; text-align: center;"}
:::: {.column style="width: 45%; border: 1px solid rgb(45, 105, 55); border-radius: 1em; padding: 0.8em; background: rgba(45, 105, 55, 0.03)"}
<img src="images/excel.png" style="height: 50px; margin: 0;"/>

Excel Spreadsheet

::: {.excel-table style="width: fit-content; margin: auto;"}
|                 |
|-----------------|
| A               |
| 1               |
| 2               |
| 3               |
| 4               |
| 5               |
| =AVERAGE(A2:A6) |
:::
::::

::: {.column width="5%"}
:::

:::::: {.column style="width: 50%; border: 1px solid rgb(51, 102, 182); border-radius: 1em; padding: 0.8em; background: rgba(51, 102, 182, 0.03);"}
![](images/r-logo.png){style="margin: 0;" width="64"}

::::: flex
::: flex-l
R Data

```{r}
#| echo: false
#| class: r-table

data <- data.frame(A = 1:5)

data

```
:::

::: flex-r
R Code

```{r}

mean(data$A)

sum(data$A)

sd(data$A)
```
:::
:::::
::::::
::::::::::

```{css, echo = FALSE}
.excel-table {
  text-align: right !important;
  font-size: 0.8em;
  margin: auto;
  background: white;
}
.excel-table th, .excel-table td {
  border: 1px solid lightgrey !important;
}
.r-table {
  font-size: 0.8em;
}

.flex {
  display: flex;
}
.flex-l {
  width: 30%; 
  padding-right: 1em;
}
.flex-r {
  border-left: 1px solid grey;
  padding-left: 0.8em;
  width: -webkit-fill-available;
}
```

### RStudio Interface

![](images/rstudio.png){width="100%"}

::: {.content-hidden when-format="revealjs"}
RStudio is the interface we'll use to write and run R code and see its output. The basic interface has 4 panels, each with a few tabs:

-   Top-left: Code editor / data viewer
    -   Open, edit, and save code documents
    -   Execute code within files
    -   View data
    -   You can have multiple 'tabs' open at once,
-   Bottom-left: R console
    -   You can type code directly and run it by pressing enter.
    -   You won't be saving your code as a document like when you type in in the editor, so this is useful for testing something simple out
-   Top-right: Environment
    -   As you execute code you may be creating objects like sets of numbers of data.frames. Those objects will appear here.
    -   You can click the name of some objects, like data.frames, and it will open a view of the data as a tab in the editor pane
-   Bottom-right: Files/folders, Plots, Viewer, help window
    -   You can navigate the file tree
    -   And get Help with functions
    -   As well as seeing plots and other kinds of output
:::

## Additional packages

::: {.content-hidden when-format="revealjs"}
The R language has many functions built in. Generally speaking, you can find a way to do pretty much anything you would like to do using just 'base' R.

However there are many common tasks that are a bit tedious or unintuitive to do using base R. One of R's strengths is how extensible it is: anyone can write their own functions, turn the code into an R package, and make that package available to other R users.
:::

::: {.content-visible when-format="revealjs"}
"**Base-R**" and its extended ecosystem
:::

### Tidyverse

![](images/tidyverse.png){fig-align="center"}

::: {.content-hidden when-format="revealjs"}
The tidyverse package is a container for multiple individual packages. The whole family of tidyverse packages are written with a consistent syntax and logic, and are widely used for data analysis. `readr` handles importing data, `dplyr` and `tidyr` have many functions for data cleaning and manipulation, `stringr`, `lubridate`, and `forcats` are specialized for working with text, dates, and categorical variables respectively; `ggplot2` makes graphs; and `tidymodels` is for modelling.
:::

### Specialized analyses

::: {.content-hidden when-format="revealjs"}
The extended ecosystem includes packages specialized for almost any kind of analysis you can think of. To give a few examples...
:::

-   Structural equation modeling (`lavaan`)

-   Meta-analysis (`metafor`)

-   Linear mixed effects models (`lme4`, `simr`)

-   Bootstrapping (`boot`)

-   Bayesian models (`brms`, `rstanarm`)

-   Network analyses (`igraph`, `ggraph`, `tidygraph`, `qgraph`, `bootnet`)

-   Language analysis (`tidytext`, `quanteda`)

-   Audio analysis (`tuneR`, `seewave)`

-   Machine learning (`tidymodels`)

### Additional capabilities

E.g. maps (`sf`, `leaflet`)

```{r}
#| eval: false

library(leaflet)
  
leaflet() |>
  addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") |>
  addMarkers(lng = -73.96339268916061,
             lat = 40.80949994182454, 
             popup = "Hello from Barnard!")

```

::: {.content-visible when-format="revealjs"}

------------------------------------------------------------------------
:::

::: {.content-hidden when-format="pdf"}
```{r}
#| echo: false

# showing a cool interactive map here but only works with html output.
# since i'm rendering the whole site as a pdf as well, this breaks it
# so let's only run the code when we're not rendering a pdf

rendering_pdf <- any(stringr::str_detect(readLines("_quarto.yml"), 
                                         "type: book"))

if (!rendering_pdf) {
  library(leaflet)
  
  leaflet() |>
  addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") |>
  addMarkers(lng = -73.96339268916061,
             lat = 40.80949994182454, 
             popup = "Hello from Barnard!")
}

```
:::

### Interactivity

E.g. `plotly`

```{r}
#| echo: false
#| message: false

if (!rendering_pdf) {
library(plotly)

x <- seq(-5, 5, length.out = 1000)
dfs <- 1:30

aval <- list()
for (df in dfs) {
  aval[[df]] <- list(
    visible = FALSE,
    x = x,
    y = dt(x, df)
  )
}
aval[[1]]$visible <- TRUE  # show df = 1 initially

steps <- list()
fig <- plot_ly()

# add t-distribution traces
for (i in seq_along(dfs)) {
  fig <- add_lines(fig,
                   x = aval[[i]]$x,
                   y = aval[[i]]$y,
                   visible = aval[[i]]$visible,
                   type = "scatter",
                   mode = "lines",
                   line = list(color = "red", width = 2),
                   showlegend = FALSE)

  step <- list(
    args = list(
      list(visible = c(rep(FALSE, length(dfs)), TRUE)),
      list(xaxis = list(title = list(
        text = paste("t-distribution (df =", dfs[i], ")"),
        standoff = 5)))
    ),
    method = "update",
    label = ""
  )
  step$args[[1]]$visible[i] <- TRUE
  steps[[i]] <- step
}

# add normal curve (always visible)
fig <- add_lines(fig,
                 x = x,
                 y = dnorm(x),
                 visible = TRUE,
                 line = list(dash = "dash", color = "black", width = 2),
                 name = "Normal (μ=0, σ=1)",
                 showlegend = TRUE)

# layout
fig <- layout(fig,
              xaxis = list(title = list(
                text = "t-distribution (df = 1)",
    standoff = 5  # default is ~15; increase to lift label
  )),
              yaxis = list(title = "Density", range = c(0, 0.4)),
              sliders = list(list(
                active = 0,
                currentvalue = list(visible = FALSE),  # hide df display
                steps = steps,
                y = -0.1,
                tickwidth = 0  # no tick labels
              )),
              margin = list(b = 100))

fig
}

```

### Installing packages

```{r}
#| eval: false

install.packages("tidyverse")

install.packages("lme4")
```

Packages only need to be installed on your system once.

### Using packages

::: {.content-hidden when-format="revealjs"}
If you are just using one function from a package as a one-off, you can use the double-colon `::` operator in the form `package::function()`, i.e.
:::

```{r}
#| eval: false

# package::function syntax

dplyr::filter(...)

tidyr::pivot_longer(...)

lme4::lmer(...)

```

::: {.content-hidden when-format="revealjs"}
If you will be using a package's functions repeatedly, it can be preferable to activate the entire package using the `library()` function.
:::

```{r}
#| eval: false

# activate installed packages first with library()

library(tidyverse)
library(lme4)

# then use functions

lmer(...)
```

::: {.content-hidden when-format="revealjs"}
Note that a package only needs to be installed once on your system (or in a new posit.cloud project), but if you are using the `library()` method to activate the package, it must be done every time you have a new 'session' in R.
:::
