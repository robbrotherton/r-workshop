---
format: 
  html: default
  revealjs: 
    output-file: 1_1_intro-to-r_presentation.html
---

# Introduction to R and RStudio

## Why R?

A coding language specialized for statistical computing and data analysis. Free and open-source. (Though there is a cloud-based version which can be paid).

-   Import data from your computer, websites, databases, via webscraping

-   Clean and organize data

-   Analyze and visualize the data

-   Communicate the results in various formats (pdf research paper, website, presentation slides)

## The general workflow

### Manipulating data

::: {.content-hidden when-format="revealjs"}
It might seem daunting if you've have no experience with coding, but the basic idea is that you have some data, like you are familiar with from a regular Excel or Google Sheets spreadsheet, and you perform operations on your data using functions a lot like you would in Excel/Sheets. For example, you might compute an average in Sheets by typing `=AVERAGE(A1:A10)`. In R you might type `mean(my_data$column_a)`. The specifics of the function names are different, but the basic idea is the same.
:::

### Separation of data and code

A major difference between working with data in Excel vs. R is the separation of data from code. Rather than writing functions to manipulate or analyze data directly in your spreadsheet, code is written in a separate code file, which references **but does not modify** the source data file (unless you tell it to).

::: {.columns style="display: flex; align-items: stretch; align-content: center; text-align: center;"}
::: {.column style="width: 45%; border: 1px solid rgb(45, 105, 55); border-radius: 1em; padding: 0.8em; background: rgba(45, 105, 55, 0.03)"}
<img src="images/excel.png" style="height: 50px; margin: 0;"/>

Excel Spreadsheet

::: {.excel-table style="width: fit-content; margin: auto;"}
|                 |
|-----------------|
| A               |
| 1               |
| 2               |
| 3               |
| 4               |
| 5               |
| =AVERAGE(A2:A6) |
:::
:::

::: {.column width="5%"}
:::

::: {.column style="width: 50%; border: 1px solid rgb(51, 102, 182); border-radius: 1em; padding: 0.8em; background: rgba(51, 102, 182, 0.03);"}
<img src="images/r.png" style="height: 50px; margin: 0;"/>

::: flex
::: flex-l
R Data

```{r}
#| echo: false
#| class: r-table

data <- data.frame(A = 1:5)

data

```
:::

::: flex-r
R Code

```{r}

mean(data$A)

sum(data$A)

sd(data$A)
```
:::
:::
:::
:::

```{css, echo = FALSE}
.excel-table {
  text-align: right !important;
  font-size: 0.8em;
  margin: auto;
  background: white;
}
.excel-table th, .excel-table td {
  border: 1px solid lightgrey !important;
}
.r-table {
  font-size: 0.8em;
}

.flex {
  display: flex;
}
.flex-l {
  width: 30%; 
  padding-right: 1em;
}
.flex-r {
  border-left: 1px solid grey;
  padding-left: 0.8em;
  width: -webkit-fill-available;
}
```

### RStudio Interface

![](rstudio-interface-1.png)

::: {.content-hidden when-format="revealjs"}
RStudio is the interface we'll use to write and run R code and see its output. The basic interface has 4 panels, each with a few tabs:

-   Top-left: Code editor / data viewer
    -   Open, edit, and save code documents
    -   Execute code within files
    -   View data
    -   You can have multiple 'tabs' open at once,
-   Bottom-left: R console
    -   You can type code directly and run it by pressing enter.
    -   You won't be saving your code as a document like when you type in in the editor, so this is useful for testing something simple out
-   Top-right: Environment
    -   As you execute code you may be creating objects like sets of numbers of data.frames. Those objects will appear here.
    -   You can click the name of some objects, like data.frames, and it will open a view of the data as a tab in the editor pane
-   Bottom-right: Files/folders, Plots, Viewer, help window
    -   You can navigate the file tree
:::

## Additional packages

The R language has many functions built in. Generally speaking, you can find a way to do pretty much anything you would like to do using just 'base' R.

However there are many common tasks that are a bit tedious or unintuitive to do using base R. One of R's strengths is how extensible it is: anyone can write their own functions, turn the code into an R package, and make that package available to other R users.

### Tidyverse

![](images/tidyverse.png){fig-align="center"}

::: {.content-hidden when-format="revealjs"}
Actually, the tidyverse package is a container for multiple individual packages. The whole family of tidyverse packages are written with a consistent syntax and logic.
:::

### Specialized analyses

E.g. Linear mixed effects models (`lme4`); bootstrapping (`boot`); bayesian models (`brms`).

### Additional capabilities

Maps

```{r}
library(leaflet)

leaflet() |>
  addProviderTiles("NASAGIBS.ViirsEarthAtNight2012") |>
  addMarkers(lng = -73.96339268916061,
             lat = 40.80949994182454, 
             popup = "Hello from Barnard!")
```

### Installing packages

```{r}
#| eval: false

install.packages("tidyverse")

install.packages("lme4")
```

Packages only need to be installed on your system once.

### Using packages

::: {.content-hidden when-format="revealjs"}
If you are just using one function from a package as a one-off, you can use the double-colon `::` operator in the form `package::function()`, i.e.
:::

```{r}
#| eval: false

# package::function syntax

dplyr::filter(...)

tidyr::pivot_longer(...)

lme4::lmer(...)

```

::: {.content-hidden when-format="revealjs"}
If you will be using a package's functions repeatedly, it can be preferable to activate the entire package using the `library()` function.
:::

```{r}
#| eval: false

# activate installed packages first with library()

library(tidyverse)
library(lme4)

# then use functions

lmer(...)
```

::: {.content-hidden when-format="revealjs"}
Note that a package only needs to be installed once on your system (or in a new posit.cloud project), but if you are using the `library()` method to activate the package, it must be done every time you have a new 'session' in R.
:::

## Help!

There is a help documentation page for every function. You can access it by typing a question mark and then the name of the function in the console and hitting Enter/Return:

```{r}
#| eval: false

?mean

?t.test
```

Doing so brings up the function documentation in the Help pane in the bottom-right of the RStudio interface.

Alternatively, you can click into the Help pane directly and type a function or topic into the search bar near the top of the pane.
