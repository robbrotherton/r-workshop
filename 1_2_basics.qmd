---
format: 
  html: default
  revealjs: 
    output-file: 1_2_basics_presentation.html
---

# Basics of writing R code

::: callout-note
## Resources

Download this file to accompany this section:

-   ![](images/r-logo.png){height="0.8em" style="vertical-align: baseline;"} [my_first_r_file.R](resources/my_first_r_file.R){download="my_first_r_file.R"}

After you save it, double click it and it should open in the Editor pane in RStudio.
:::

## Writing and running code

::: {.content-hidden when-format="revealjs"}
Writing some code in an .R document (or opening an `.R` file with code already in it) does not cause the code to be executed automatically. You need to run the code yourself. You can run a single line of code at a time, or a whole section, or an entire script.
:::

-   One line at a time:

    -   Run button at top-right of editor pane ![](images/run.png){style="height: 1em; width: 3.42em; margin: 0; vertical-align: middle;"}

    -   Command (or Ctrl) ⌘ Return ⏎ (advances cursor to next line)

    -   Option (or Alt) ⌥ + Return ⏎ (does not advance cursor)

-   Whole script

    -   Source (runs code, doesn't show output)

    -   Source with Echo (shows output)

### Let's run some code

To start getting used to writing and running code, let's use R as a calculator to do some sums.

```{r}

1 + 1

(-3)^2

# a line that starts with the # is a comment
# comments do not get executed even if they contain valid code

# 2 + 2

# write a sum of your own. 
# run the code and make sure you get the answer you're expecting

```

## Data structures and syntax

### Vectors

In R, a *vector* is a collection of values of a single type of data. You can make one by using the `c()` function to collect things together.

```{r}

# numeric
c(1, 2, 3, 4, 5)

# a colon can be used to produce a vector of consecutive integers
1:5 

5:1

1 # is just a numeric vector of length 1

```

### Other common data types

```{r}

# character
c("hello", "world")

# logical
c(TRUE, FALSE)
```

## Assignment

R has a fancy assignment operator: `<-`.[^1]

[^1]: Most other coding languages tend to use a boring `=` for assignment. Sure it's nice not having to type an extra character, but there's a keyboard shortcut to quickly add an `<-` in RStudio: Option/Alt + `-`. And philosophically, the `<-` arrow conveys the inherent directionality of the assignment operation. The object is assigned to the name; the object and its name are not equal and so the `=` arguably gives a misleading impression of the two things being one and the same. (Also, to let you in on a secret, `=` also works for assignment in R.)

```{=html}
<style>
  .reveal .slide sup {
  color: white;
}
  .reveal .slide aside .aside-footnotes {
  display: none;
}
</style>
```

[You assign things to a name by typing something like:]{.content-hidden when-format="revealjs"}

```{r}

numbers <- c(1, 2, 3, 4, 5)

```

::: {.content-hidden when-format="revealjs"}
Almost anything can be assigned to a name. In the example here the vector `c(1, 2, 3, 4, 5)` was assigned to the name `numbers`. But in other situations you might assign an entire dataset, a statistical model object, a function, or something else. Whatever it is you're assigning, giving it a name allows to you perform subsequent operations more easily, and choosing appropriate names makes your code easier to understand.
:::

### Valid names

::: {.content-hidden when-format="revealjs"}
The `name` can be almost anything you like; it just can't start with a number or contain spaces or special characters other than `_` (underscore) and . (period). No spaces! It can have uppercase characters as well as lowercase, but note that when it comes time to use the name later you will need to type it exactly right, including capitalization. So you can make life a little easier for yourself by using a consistent naming convention, ideally avoiding capital letters altogether.
:::

::: {.content-visible when-format="revealjs"}
-   Start with a letter (A–Z, a–z) or a . (but not . followed by a number)

-   Contain only letters, numbers, . or \_
:::

```{r}
#| eval: false

# valid name examples ✅

data <- "works"

good_name <- "fine"

.ValidName <- "works, watch out for the capitals"

long_name_for_a_variable <- "sure, bit long to type though"

```

::: {.content-visible when-format="revealjs"}
### Invalid names
:::

```{r}
#| eval: false

# invalid names ❌ 

1badname <- "won't work"

worse name <- "can't have spaces"

# backticks allow for otherwise unacceptable names
`1bad name` <- "will work"
```

### The Global Environment

![](images/environment.png){fig-align="center" width="80%"}

::: {.content-hidden when-format="revealjs"}
When you run the code `numbers <- c(1, 2, 3, 4, 5)` or any other assignment operation, you generally won't see any output in the console. What you will see, however, is something new appear in your Global Environment, the pane in the top-right of the RStudio window.
:::

## Functions

Many of the things we eventually want to do involve functions. To use a function, type its name, followed by parentheses. Any inputs or other arguments you need to specify go inside the parentheses.

```{r}

sum(c(1, 2, 3, 4, 5)) # sum() takes a numeric vector as input

# use sum() to get the total of a vector of numbers of your own
# run the code and make sure you get the answer you're expecting

```

### Using functions with named objects

::: {.content-hidden when-format="revealjs"}
Most usefully, we can use a named object we have created as input to a function. So rather than having to type or copy/paste the original vector `c(1, 2, 3, 4, 5)`, we can give it a name and feed that name into a function that expects a numeric vector as input.
:::

```{r}
numbers <- c(1, 2, 3, 4, 5)

sum(numbers)

length(numbers)

mean(numbers)

sd(numbers)

min(numbers)

max(numbers)
```

### Function arguments

::: {.content-visible when-format="revealjs"}
When must you type argument names? Sometimes.
:::

::: {.content-hidden when-format="revealjs"}
A function generally has one or more "arguments", to which you supply parameters. For example, the `mean()` function's first argument is the set of numbers you want to compute the mean of.

When you need to specify more than one argument, they are separated by a comma. Arguments usually have names. You don't necessarily have to type the name of the argument, because of R's positional matching.

The `seq()` function, for example, produces a sequence of numbers according to three arguments, `from`, `to`, and `by`.
:::

```{r}
seq(from = 1, to = 10, by = 2)
```

::: {.content-hidden when-format="revealjs"}
If you don't type the names of the arguments, and just supply three values, R matches them by position, so this gives exactly the same output as the previous line of code because `from`, `to`, and `by` are the first three arguments respectively.
:::

```{r}

seq(1, 10, 2) # gives same result as above

```

::: {.content-hidden when-format="revealjs"}
Suppose we actually wanted a sequence of 6 values. We could use the `length.out` argument. Now we definitely have to type the name at least of the `by` and `length.out` arguments, because positional matching won't work.
:::

```{r}
seq(from = 1, by = 2, length.out = 6) # argument names required
```

::: {.content-visible when-format="revealjs"}
When *should* you type argument names? Also sometimes.
:::

::: {.content-hidden when-format="revealjs"}
So when do you type the argument names explicitly? Definitely when you need to, and maybe when you don't: remember someone (including your future self, might eventually want to read and understand your code. Seeing the argument names can help with that.
:::

### Getting help with functions

You can get help with a function (to see what arguments it accepts, for example) by typing a question mark followed by the function name (without parentheses) in your console.

```{r}
#| eval: false

?mean
```

Running the code will bring up the function's help documentation in RStudio's Help pane.

## Working with vectors

### Indexing

You can access individual element of a vector by supplying an index within square brackets. Note that **indexing in R starts at 1** (the first element's index is 1). This differs from many other coding languages which are 0-indexed (the first element's index is 0).

```{r}

numbers <- c(3, 1, 4, 1, 5, 9)

numbers[1] # first element, because R uses 1-indexing

numbers[1:3] # multiple consecutive elements

# can you pick out the 1st, 3rd, and 5th elements?
```

### Checking conditions

```{r}

numbers <- c(1, 2, 3, 4, 5)

numbers == 3

numbers != 3

numbers %in% c(1, 3)

numbers < 3
```

### Combining conditions with indexing

You can also select elements from a vector using a logical vector of the same length:

```{r}
numbers[c(TRUE, TRUE, FALSE, FALSE, FALSE)]
```

That's not useful by itself, but how might you create a logical vector like that? By testing the vector with some condition! So the condition can be used to pick out the relevant elements directly.

```{r}

numbers[numbers < 3]
```

### Doing math with vectors

```{r}

numbers <- c(1, 2, 3, 4, 5)

numbers * 2

6 - numbers

numbers * numbers

```

### Combining math and functions

```{r}

sd(numbers) / sqrt(length(numbers)) # standard error

numbers - mean(numbers) # deviations

(numbers - mean(numbers))^2 # squared deviations

# can you compute the sum of squared deviations?
```

## **Missing Values**

To anticipate a problem we often run into when working with real data, sometimes our data includes missing values. R has a special placeholder for missing values: `NA`.

```{r}

numbers <- c(1, 2, NA, 4, 5)

mean(numbers)

# can you solve the problem by looking at the help page for the mean function?

```

## Data.frames

::: {.content-hidden when-format="revealjs"}
So far we've been working with individual vectors. Sooner of later we're going to want to work with a collection of different sets of numbers: a spreadsheet. R's name for this kind of data structure is a *data.frame*. A data.frame is a collection of vectors; each column is a vector. Different columns can have different types (numeric, character, logical, date, etc), but each column will contain a single type of data. All columns must have the same length.

Most commonly we have a data file already (a .csv or maybe an Excel file or some other format) and we read it in to R. However, to get a sense of how these objects work, and how to work with them, we can make one from scratch.
:::

```{r}
df <- data.frame(a = c(1, 2, 3, 4, 5),
                 b = c(6, 7, 8, 9, 10),
                 c = c("this", "is", "a", "text", "column"),
                 d = c(TRUE, FALSE, FALSE, FALSE, TRUE))

str(df)
```

::: content-visible

------------------------------------------------------------------------
:::

```{r}

# get a quick summary of each column

summary(df)
```

### Selecting and using a data.frame column

::: {.content-hidden when-format="revealjs"}
R has many ways of picking out particular columns, rows, and individual values from a data.frame. The most useful is the `$` dollar sign for referring to a column by name. The data.frame we just created has a column named "a", so we can access the single vector that makes up that column by typing:
:::

```{r}

df$a
  
```

::: {.content-hidden when-format="revealjs"}
Then we can use all the functions, mathematical operations and everything else we've learned about so far to start working with the columns of our data.frame.
:::

```{r}
#| warning: true

# remember, a data.frame column is a vector like any other

df$a * 2

df$a * df$b

mean(df$a)

mean(df$c)

```

## The Pipe: `|>`

::: {.content-hidden when-format="revealjs"}
When we start working with real data.frames, it will be convenient to string together different operations in an analytic pipeline using R's pipe operator: `|>`.[^2] Whatever is on the left of the pipe gets "piped" into the function on the next line as its first argument. That is very handy when a function is expecting a data.frame as its first argument. The `tidyverse` family of packages are all written with this syntax in mind, so they are great for building efficient and eloquent analytic pipelines.
:::

[^2]: If you're looking at R code from elsewhere (e.g. looking up help online) you may see a different pipe: `%>%`. The `|>` pipe, called the "native" pipe, was only included as a feature of base R relatively recently. Until then, the `%>%` pipe was provided by an external package (called `magrittr`. [Get it?](https://magrittr.tidyverse.org/logo.png)). In practice the pipes work similarly, so you can often just replace `%>%` with `|>` and it'll work fine, but it's worth being aware of.

```{r}
#| eval: false

df |> 
  summary()

# is equivalent to 

summary(df)
```

::: {.content-hidden when-format="revealjs"}
The real power of this becomes apparent when you need to conduct a more elaborate sequence of steps. We can pass a data.frame from function to function, modifying it along the way. The pipe allows the code to be neatly segmented and readable as a set of instructions from top to bottom.
:::

```{r}
#| warning: false

# building a more elaborate pipeline 
# using the pipe operator and tidyverse functions

library(tidyverse)

df |> 
  select(a, b) |> 
  filter(a > 3) |> 
  mutate(c = a + b)
```
