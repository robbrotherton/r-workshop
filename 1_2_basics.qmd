---
format: 
  html: default
  revealjs: 
    output-file: 1_2_basics_presentation.html
---

```{=html}
<script>
window.addEventListener('DOMContentLoaded', () => {
  const toc = document.querySelector('.toc-active');
  if (toc) {
    const downloadsHeader = document.createElement('h2');
    downloadsHeader.innerHTML = 'Resources';
    toc.insertBefore(downloadsHeader, toc.firstChild);

    const downloadList = document.createElement('ul');
    toc.insertBefore(downloadList, downloadsHeader.nextSibling);

    const downloadLink = document.createElement('li');
    downloadLink.innerHTML = '<a href="files/mydata.csv" download><img src="https://www.r-project.org/logo/Rlogo.svg" alt="R logo" style="height:0.8em; vertical-align:baseline; margin-right:0.4em;">R file</a>';
    downloadList.appendChild(downloadLink);
  }
});
</script>
```

# Basics of writing R code

::: callout-note
## Resources

Download this file to accompany this section:

-   ![](images/R.png){height="0.8em" style="vertical-align: baseline;"} [my_first_r_file.R](resources/my_first_r_file.R){download="my_first_r_file.R"}
:::

## Make your first R code file

File \> New File \> R Script. Creates a new, temporary `Untitled.R` file. Give it a meaningful name when you save it.

## Writing and running code

Writing some code in an .R document does not cause it to be executed automatically. You need to run the code yourself. You can run a single line of code at a time, or a whole section, or an entire script.

-   Run button at top-right of editor pane ![](images/run.png){style="height: 1em; width: 3.42em; margin: 0; vertical-align: middle;"}

-   Command (or Ctrl) ⌘ Return ⏎ (advances cursor to next line)

-   Option (or Alt) ⌥ + Return ⏎ (does not advance cursor)

```{r}

# comment

# 1 + 1

1 + 1

(-3)^2

```

### Using R like a calculator

```{r}
1 + 1

2 * 2

3^2
```

# Data structures

## Vectors

A vector is a collection of things.

```{r}

# numeric
c(1, 2, 3, 4, 5)

1:5

1 # is just a vector of length 1

# character
c("hello", "world")

# logical
c(TRUE, FALSE)
```

Doing math with vectors

```{r}

1:5 * 2

1:5 * c(1, 2)

6 - 1:5

1:5 * 1:5

```

### Coercion

Every element in a vector must be of the same type (numeric, character, logical). If that is not the case, R will coerce the data into a single type.

```{r}
c(1, 2, "three", 4, 5)

c(1, 2, "3", 4, 5)

mean(c(1, 2, "3", 4, 5))

22 < "1"

```

Coercion can have some happy consequences. For instance, logical values (`TRUE` and `FALSE`) will be coerced into the numbers 1 and 0. A function that requires numeric input, such as `sum()` or `mean()`, if given logical input, will coerce the vector to numeric.

```{r}
# doing math with logicals

c(TRUE, FALSE, FALSE, TRUE, 1)

sum(c(TRUE, TRUE, FALSE, FALSE))

mean(c(TRUE, TRUE, FALSE, FALSE))
```

### Factors

```{r}

factor(c("male", "female", "female", "male"))

factor(c("medium", "small", "large"), levels = c("small", "medium", "large"), ordered = TRUE)
```

## Functions

Many of the things we eventually want to do involve functions. To use a function, type its name, followed by parentheses. Any arguments you need to specify go inside the parentheses, separated by commas.

```{r}
sum(1:5)
length(1:5)
mean(1:5)
sd(1:5)
var(1:5)
min(1:5)
max(1:5)
```

You can also nest functions inside one another.

```{r}
sqrt(mean(1:5))
```

A function generally has one or more "arguments", to which you supply parameters. For example, the `mean()` function's first argument is the set of numbers you want to compute the mean of; in the previous examples `original_numbers` and `doubled_numbers` were the parameters I supplied. You don't necessarily have to type the name of the argument, but it can be helpful. The `seq()` function, for example, produces a sequence of numbers according to three arguments, `from`, `to`, and `by`.

```{r}
seq(from = 1, to = 10, by = 2)
```

When you don't type the names of the arguments, R matches them by position, so this gives exactly the same output as the previous line of code:

```{r}
seq(1, 10, 2)

seq(1, 2, 10)
```

You can get help with a function (to see what arguments it accepts, for example) by typing a question mark followed by the function name (without parentheses) in your console.

```{r}
#| eval: false
?mean

# see if you can compute a 'trimmed' mean for this set of skewed numbers
c(1, 2, 3, 4, 100)

mean(c(1, 2, 3, 4, 100))

mean(c(1, 2, 3, 4, 100), trim = 0.2)
```

Running the code will bring up the function's help documentation in RStudio's Help pane.

## Assignment

R has a fancy assignment operator: `<-`.[^1] You assign things to a name by typing something like:

[^1]: Most other coding languages tend to use a boring `=` for assignment. Sure it's nice not having to type an extra character, but there's a keyboard shortcut to quickly add an `<-` in RStudio: Option/Alt + `-`. And philosophically, the `<-` arrow conveys the inherent directionality of the assignment operation. The object is assigned to the name; the object and its name are not equal and so the `=` arguably gives a misleading impression of the two things being one and the same. (Also, to let you in on a secret, `=` also works for assignment in R.)

```{r}
#| eval: false

name <- thing
```

The `thing` there might be a set of numbers, an entire dataset, a statistical model object, or something else. Giving it a name allows to you perform subsequent operations more easily, and choosing appropriate names makes your code easier to understand.

```{r}
original_numbers <- 1:10
original_numbers

doubled_numbers <- original_numbers * 2
doubled_numbers
```

Most usefully, we can use these nicely named objects as input to functions.

```{r}
mean(original_numbers)
mean(doubled_numbers)
```

## **Missing Values**

To anticipate a problem we often run into when working with real data, sometimes our data includes missing values. R has a special representation for missing values: `NA`.

```{r}
NA
NaN
NULL
Inf

1

numbers <- c(1, 2, NA, 4, 5)

mean(numbers)

mean(numbers, na.rm = TRUE)

mean(numbers[!is.na(numbers)])

```

## Data.frames

So far we've been working with individual vectors. Sooner of later we're going to want to work with a collection of different sets of numbers: a spreadsheet. R's name for this kind of data structure is a *data.frame*. A data.frame is a collection of vectors; each column is a vector. As a result, different columns can have different types (numeric, character, logical, date, etc), but each column will contain a single type of data. All columns must have the same length.

Most commonly we have a data file already (a .csv or maybe an Excel file or some other format) and we read it in to R. However, to get a sense of how these objects work, and how to work with them, we can make one from scratch.

```{r}
df <- data.frame(a = c(1, 2, 3),
                 b = c("one", "two", "three"),
                 c = c(1, 2, "3"))

str(df)

summary(df)
```

### Selecting a data.frame column

```{r}
df$a

df["a"]

df[c("a", "b")]

df[1:2,]

df[1, 2]


df[df$b == "one",]

df |>
  dplyr::filter(b == "one") |>
  dplyr::select(a)
  
```

### Doing stuff with data.frames

```{r}
df$a * 2

mean(df$a)

table(df$b)
```
