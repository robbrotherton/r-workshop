---
format: 
  html: default
  revealjs: 
    output-file: 1_4_other-things_presentation.html
---

# Common causes of confusion

::: callout-note
## Resources

Download this file to accompany this section:

-   ![](images/r-logo.png){height="0.8em" style="vertical-align: baseline;"} [causes-of-confusion](resources/causes-of-confusion.R){download="causes-of-confusion.R"}[.R](resources/my_first_r_file.R){download="my_first_r_file.R"}

After you save it, double click it and it should open in the Editor pane in RStudio.
:::

## Typos

### Names

Any small typo in a name will case R to throw an error.

```{r}
#| error: true

numbers <- c(1, 2, 3, 4, 5)

numbers # this shows the contents of 'numbers'

# try typing the name wrong and see what error message you get

```

::: {.content-visible when-format="revealjs"}

------------------------------------------------------------------------
:::

```{r}
#| error: true

numbers <- c(1, 2, 3, 4, 5)

Numbers

nubmers
```

```{r}
#| echo: false

rm(numbers)
```

::: {.content-visible when-format="revealjs"}

------------------------------------------------------------------------
:::

::: {.content-hidden when-format="revealjs"}
Even worse, you might have a typo in the original assignment, and then be very confused when the object you expect to exist doesn't.
:::

```{r}
#| error: true

nummbers <- c(1, 2, 3, 4, 5)

numbers # oh dear, can you see the mistake here?

```

### Parentheses

Nesting functions is a common necessity. Make sure all the closing parentheses match up.

```{r}
sqrt(mean(seq(1, 10, 2)))

# try adding/deleting/moving some closing parentheses
```

::: {.content-visible when-format="revealjs"}

------------------------------------------------------------------------
:::

```{r}
#| error: true

sqrt(mean(seq(1, 10, 2)))) # too many!

```

```{r}
#| error: true

sqrt(mean(seq(1, 10, 2)) # not enough!

```

```{r}
#| error: true

sqrt(mean(seq(1, 10), 2)) # in the wrong place!
```

## Overwriting

::: {.content-hidden when-format="revealjs"}
Note that R will allow you to reuse a name that you already assigned something to. It will simply replace the thing that the name refers to. It will not ask if you're sure you want to do that; it won't mention it at all.
:::

```{r}
number <- 1

number * 2

number <- 2 # no warning when you reuse a name

number * 2
```

::: {.content-hidden when-format="revealjs"}
It is entirely possible for you to run lines of code out of order and get potentially confusing results as a consequence.

You might also run a line of code more than once, modifying an object in a way that you might not intend. This can be especially pernicious when you modify an object in a self-referential way.
:::

```{r}
number <- 1

number <- number * 2 # what if you run this a few times?

number
```

### Cleaning up the Global Environment

```{r}
numbers <- c(1, 2, 3, 4, 5)
```

![](images/environment.png){fig-align="center" width="80%"}

::: {.content-hidden when-format="revealjs"}
Just as easily as you can bring an object into existence, so too can you remove it. Clicking the charming little sweeping brush near the top of the Environment pane will remove everything that currently exists from your Environment. It'll even ask if you're sureâ€“a rare instance of compassion on RStudio's part.

Should the need arise, you can also remove objects from your environment using the `rm()` function.
:::

```{r}

# removing objects from the Environment

rm(numbers) # remove a particular object by name

rm(list = ls()) # remove everything in the global environment
```

::: {.content-hidden when-format="revealjs"}
Generally speaking, it's a good habit to keep an eye on your Global Environment and not to be precious about its contents. Your code is the definitive record; if the instructions to make something are in there it can always be recreated.
:::

## Vectors

### Vector math: An edge case

```{r}

numbers <- c(1, 2, 3, 4, 5)

numbers * c(1, 2, 3, 4, 5) # makes sense...

numbers * c(1, 2) # what happens here?
```

### Vector coercion {.incremental}

::: {.content-hidden when-format="revealjs"}
Every element in a vector must be of the same type (numeric, character, logical). If that is not the case, R will silently coerce the data into a single type.
:::

```{r}
#| warning: true

numbers <- c(1, 2, 3, 4, 5)
numbers

numbers <- c(1, 2, "three", 4, 5)
numbers 

numbers <- c(1, 2, "3", 4, 5)
numbers

mean(numbers)

```

### Data.frame coercion

The enforcement of the single-type rule for vectors can be especially confounding when importing data. It is not uncommon for coding errors or sneaky special characters to cause data to be imported in unexpected ways.

```{r}
#| warning: true

df <- data.frame(a = c(1, 2, 3),
                 b = c("one", "two", "three"),
                 c = c(1, 2, "3"))

str(df)

mean(df$c)
```

### Coercion confusion

Coercion can have some confusing consequences, if you are taken unawares by mixed data types.

```{r}

1 < "2"

22 < "11"

3 > "two"

# why?
```

### Coercion side effects

::: {.content-hidden when-format="revealjs"}
Coercion can have some happy consequences. For instance, logical values (`TRUE` and `FALSE`) can be coerced into the numbers 1 and 0. A function that requires numeric input, such as `sum()` or `mean()`, if given logical input, will coerce the vector to numeric.
:::

```{r}
# doing math with logicals

bool <- c(TRUE, FALSE, FALSE, TRUE)
bool 

as.numeric(bool)

sum(bool) # count of TRUEs

mean(bool) # proportion of TRUEs
```

## Factors

A factor is a special data type in R used to represent categorical data. Internally, it stores the data as integers, but each unique integer is associated with a text label (the *level*) for that category.

```{r}

data <- c("female", "male", "male", "female")

data_factor <- factor(data)

data_factor

as.numeric(data_factor)
```

::: {.content-visible when-format="revealjs"}

------------------------------------------------------------------------
:::

Perhaps our raw data coded a variable like this as numeric to begin with, and we want to add the category labels ourselves.

```{r}

data <- c(1, 2, 2, 1) # gender coded numerically

factor(data, levels = c(1, 2), labels = c("female", "male"))
```

### Ordered factors

::: {.content-hidden when-format="revealjs"}
For ordinal data, where the order of categories matters, we can specify the levels in order and use the `ordered = TRUE` argument.
:::

```{r}

# with no order specified; levels are listed alphabetically

data <- c("medium", "low", "high", "medium", "high", "high")

unordered <- factor(data) 

```

```{r}
#| echo: false

plot(unordered)
```

::: {.content-visible when-format="revealjs"}

------------------------------------------------------------------------
:::

```{r}
ordered <- factor(data, 
                  levels = c("low", "medium", "high"), 
                  ordered = TRUE)

```

```{r}
#| echo: false

plot(ordered)
```

::: {.content-hidden when-format="revealjs"}
Note that this does not affect the raw data, but it means that if we plot a graph using this ordered factor later on, the values will appear in their correct, meaningful order, rather than just the default alphabetical order.
:::

::: {.content-visible when-format="revealjs"}

------------------------------------------------------------------------
:::

```{r}
# can you make an ordered factor out of this ordinal data?

survey_data <- c("agree", "agree", "disagree", "neutral", "disagree")
```
