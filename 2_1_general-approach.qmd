---
format: 
  html: default
  revealjs: 
    output-file: 2_1_general-approach_presentation.html
---

# General thoughts on teaching with R

::: callout-note
## ![](images/posit-cloud-logo.png){style="height: 1em;"}  

In this session we'll start working in Posit Cloud. I've created a 'Space' for this workshop. You can join using this link:

<https://posit.cloud/spaces/647833/join?access_code=d044OrLrWY83pbYiQXdsnuYbxO1_vDN_rN1Q7pYx>

I'll link you to the actual R materials in due course.
:::

## Start with something cool

[posit.cloud/spaces/647833/content/10308914](https://posit.cloud/spaces/647833/content/10308914)

## Justify using R

-   Skill Development: Proficiency in R is increasingly sought after in both academic and industry settings, enhancing students' career prospects. See : <https://r4stats.com/articles/popularity/>

-   Reproducibility: R promotes transparent and reproducible research practices, aligning with open science principles.

-   Cost-Effectiveness: R is free and open-source, making it accessible to all students regardless of financial resources.

-   Conceptual Understanding: Coding statistical procedures reinforces comprehension of underlying concepts. For example, writing functions to compute z-scores or simulate sampling distributions deepens understanding.

Requiring students to learn both statistical concepts (or research methods or whatever) *and* coding is a lot to ask in a single semester. Setting expectations and stating goals can help students see learning R as worthwhile from the outset.

## Grading

::: {.content-hidden when-format="revealjs"}
Learning R can be challenging, especially for students new to programming. In R, there is often more than one way to do things. Some approaches may be more effective and straightforward than others, but there is value in the process of discovery. Making mistakes and learning how to resolve them is a crucial part of learning to code. In setting coding assignments, I want to emphasize that the value is in the effort, even if it does not immediately produce the ideal outcome.
:::

```{=html}
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The only way to write good code is to write tons of shitty code first. Feeling shame about bad code stops you from getting to good code</p>&mdash; Hadley Wickham (@hadleywickham) <a href="https://twitter.com/hadleywickham/status/589068687669243905?ref_src=twsrc%5Etfw">April 17, 2015</a></blockquote>
```

To foster a supportive learning environment:

-   Effort-Based Grading: Assign grades based on the completeness and sincerity of attempts rather than correctness. This encourages experimentation and reduces anxiety.

-   Feedback-Oriented: Provide constructive feedback to guide improvement, focusing on the learning process over the final product.

My grading scheme:

-   0 points: No submission

-   1 point: Incomplete attempt

-   2 point: Complete, valid attempt

::: {.content-hidden when-format="revealjs"}
That's it. Every student gets full credit for a valid attempt. Even if every answer is wrong, they get full credit for the effort. It is entirely possible for every student to get full credit for the coding assignments across the semester, even if they never get a single correct answer–as long as they try. Of course, generally students will learn from their mistakes and improve along the way.

The drawback to this is that it does not differentiate the students who put in great effort, going above and beyond expectations, from those who simply meet the minimum requirements of the assignments. I feel that is a worthwhile trade-off, especially since such efforts can be rewarded as part of a participation grade, for example.
:::

## Most common problems

Students often encounter specific hurdles when learning R:

-   Annoying technical problems: Forgetting to install or load necessary packages leads to errors.

-   Syntax Errors: Missing commas, parentheses, or quotation marks are common. Encourage the use of RStudio's syntax highlighting and error messages to identify issues.

-   Understanding Data Structures: Differentiating between vectors, data frames, and lists can be confusing. Use analogies and visual aids to clarify these concepts.

-   Annoying technical problems: Forgetting to install or load necessary packages leads to errors.

-   Function Arguments: Misunderstanding default arguments or the order of parameters can cause unexpected results. Demonstrate how to find and read function documentation effectively.

To address these challenges:

-   Incremental Learning: Introduce concepts gradually, building upon previous knowledge.

-   Active Practice: Incorporate hands-on exercises that allow students to apply new skills immediately.

## Additional resources

One of the nice things about R is that many academic users have developed great teaching materials and made them available for free. A few examples:

-   Danielle Navarro (2019) [Learning Statistics with R](https://learningstatisticswithr.com/book/)

-   Mine Çetinkaya-Rundel and Johanna Hardin (2022) [Modern Statistical Methods for Psychology](https://bookdown.org/gregcox7/ims_psych/)

-   Russell A. Poldrack (2018) [Statistical Thinking for the 21st Century](http://statsthinking21.org/index.html)

## Generative AI

In its latest version RStudio has Github Copilot, an LLM interface, built-in. It suggests code that might come after what you have typed so far. You can even just type a comment about what you would like to achieve, and Copilot will suggest code. Here, I typed the comment and the function name, and Copilot completed the function body.

```{r}
# a function to compute the sum of squared deviations
sum_squares <- function(x) {
  n <- length(x)
  mean_x <- mean(x)
  sum_sq_dev <- sum((x - mean_x)^2)
  return(sum_sq_dev)
}

sum_squares(c(1, 2, 3, 4, 5))

```
