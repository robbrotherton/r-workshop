[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R faculty workshop",
    "section": "",
    "text": "Workshop info\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Workshop info"
    ]
  },
  {
    "objectID": "1_intro-to-r.html",
    "href": "1_intro-to-r.html",
    "title": "1  Introduction to R and RStudio",
    "section": "",
    "text": "1.0.1 Wait, what are you talking about?\nThere are a few different names involved here, so to try and clear things up:\nYou can install R/RStudio/Quarto on your own computer for free and do things that way, but using posit.cloud simplifies things immensely.",
    "crumbs": [
      "Introduction to R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R and RStudio</span>"
    ]
  },
  {
    "objectID": "1_intro-to-r.html#the-general-workflow",
    "href": "1_intro-to-r.html#the-general-workflow",
    "title": "1  Introduction to R and RStudio",
    "section": "1.1 The general workflow",
    "text": "1.1 The general workflow\nR is a programming language well-suited to interactive data exploration and analysis. It is widely used for psychological research, which is why we’ll use it as our tool for learning and applying the statistical techniques covered in the lectures.\nIt might seem daunting if you’ve have no experience with coding, but the basic idea is that you have some data, like you are familiar with from a regular Excel or Google Sheets spreadsheet, and you perform operations on your data using functions a lot like you would in Excel/Sheets. For example, you might compute an average in Sheets by typing =AVERAGE(A1:A10). In R you might type mean(my_data$column_a). The specifics of the function names are different, but the basic idea is the same.\n\n1.1.1 RStudio\nRStudio is the interface we’ll use to write and run R code and see its output. The basic interface has 4 panels, each with a few tabs:\n\n\nTop-left: Code editor / data viewer\n\nYou will edit your problem set document here\nYou can run code within code chunks by clicking on a line of code and pressing Ctrl/Cmd + Enter on your keyboard, or pressing the green “play” button at the top of the chunk\n\nBottom-left: R console\n\nYou can type code directly and run it by pressing enter.\nYou won’t be saving your code as a document like when you type in in the editor, so this is useful for testing something simple out\n\nTop-right: Environment\n\nAs you execute code you may be creating objects like sets of numbers of data.frames. Those objects will appear here.\nYou can click the name of some objects, like data.frames, and it will open a view of the data as a tab in the editor pane\n\nBottom-right: Files/folders, Plots, Viewer, help window\n\nYou can navigate the file tree, and when you “Render” your document you will see how it looks as a fully-formatted web page.\n\n\nOnce you start working on problem sets, my recommended workflow is to “Render” your document frequently with “Preview in Viewer Pane” selected. That will give you something like this:\n\n\n\n\n\nYou’ll have the editable problem set .qmd open on the left, and an expanded preview of the rendered document on the right. That should make it easy to see questions and instructions on the right, and add your own code solutions and text on the left, re-rendering as you make changes to see your work reflected in the preview on the right.",
    "crumbs": [
      "Introduction to R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R and RStudio</span>"
    ]
  },
  {
    "objectID": "2_syntax.html",
    "href": "2_syntax.html",
    "title": "2  Syntax",
    "section": "",
    "text": "2.0.1 Assignment\nR has a fancy assignment operator: &lt;-.1 You assign things to a name by typing something like:\nname &lt;- thing\nThe thing there might be a set of numbers, an entire dataset, or something else. Giving it a name allows to you perform subsequent operations more easily, and choosing appropriate names makes your code easier to understand.\noriginal_numbers &lt;- 1:10\noriginal_numbers\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\ndoubled_numbers &lt;- original_numbers * 2\ndoubled_numbers\n\n [1]  2  4  6  8 10 12 14 16 18 20",
    "crumbs": [
      "Introduction to R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Syntax</span>"
    ]
  },
  {
    "objectID": "2_syntax.html#footnotes",
    "href": "2_syntax.html#footnotes",
    "title": "2  Syntax",
    "section": "",
    "text": "Most other coding languages tend to use a boring = for assignment. Sure it’s nice not having to type an extra character, but there’s a keyboard shortcut to quickly add an &lt;- in RStudio: Option/Alt + -. And philosophically, the &lt;- arrow conveys the inherent directionality of the assignment operation. The object is assigned to the name; the object and its name are not equal and so the = arguably gives a misleading impression of the two things being one and the same. (Also, to let you in on a secret, = also works for assignment in R.)↩︎\nIf you’re looking at R code from elsewhere (e.g. looking up help online) you may see a different pipe: %&gt;%. The |&gt; pipe, called the “native” pipe, was only included as a feature of base R relatively recently. Until then, the %&gt;% pipe was provided by an external package (called magrittr. Get it?). In practice the pipes work similarly, so you can often just replace %&gt;% with |&gt; and it’ll work fine, but it’s worth being aware of.↩︎",
    "crumbs": [
      "Introduction to R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Syntax</span>"
    ]
  }
]