---
format: 
  html: default
  revealjs: 
    output-file: 1_3_working-with-data_presentation.html
---

# Working with data

## Start a new Project

File \> New Project \> New Directory \> New Project

## The working directory

R can access your entire filesystem, so you can access and create files anywhere on your hard drive. It can be a bit tedious to type explicit complete file paths every time you need to read or write a file, however. E.g.:

`"/Users/robertbrotherton/Documents/r-workshop/my_first_r_file.R"`

Another big drawback is that if you share your code for someone else to run on their own computer, the filepaths will not work!

```{r}
getwd()
```

Now whenever you use a function that requires you to point to a file will be looking in that directory. So you can type

```{r}
#| eval: false

read.csv(file = "my_first_r_file.R")
```

## Writing and running code

## Importing data

```{r}
#| eval: false

# read.csv()
# foreign::read
foreign::read.dta("stats_file.dta")
haven::read
foreign::read.spss("spss_file.sav")

readxl::read_excel("excel_file.xlsx")
```

## Piping

You can string together different operations in a pipeline using the pipe operator: `|>`.[^1] The result of each line of code gets "piped" into the function on the next line as its first argument. For example, below I take some data (named `my_data`) and perform a series of operations, first changing its shape using `pivot_longer()`, then creating summary statistics for the mean and standard deviation separately by a grouping-variable, then I pipe the summary statistics into `ggplot()` to create a graph with a `geom_col()` layer for the geometry.

[^1]: If you're looking at R code from elsewhere (e.g. looking up help online) you may see a different pipe: `%>%`. The `|>` pipe, called the "native" pipe, was only included as a feature of base R relatively recently. Until then, the `%>%` pipe was provided by an external package (called `magrittr`. [Get it?](https://magrittr.tidyverse.org/logo.png)). In practice the pipes work similarly, so you can often just replace `%>%` with `|>` and it'll work fine, but it's worth being aware of.

```{r}
#| eval: false
#| include: false
library(ggplot2)
library(dplyr)
library(tidyr)


my_data <- data.frame(a = c(3, 3, 3),
                      b = c(5, 5, 5))

my_data |> 
  filter(a > 3)

# is equavalent to 

filter(my_data, a > 3)

```

## Data cleaning

```{r}
#| eval: false
df |> 
  filter() |> 
  mutate(something = case_when(
    condition ~ new_value,
    condition ~ new_value,
    TRUE ~ NA
    )) |> 
  drop_na()


# example mutations
# reverse code

# example conditions for case_when
# something %in% values
# !something %in% values
# something > 0
```

## Data exploration

```{r}
#| eval: false
dplyr::summarize()
```

## Data Visualization

### Using built in `plot`s

```{r}

```

### Using `ggplot`

```{r}
#| eval: false
my_data |> 
  pivot_longer(everything(),
               names_to = "condition",
               values_to = "score") |> 
  summarize(mean = mean(score),
            .by = condition) |> 
  ggplot(aes(x = condition, y = mean)) +
  geom_col()

```

## Data Analysis

### Correlation

```{r}
#| eval: false
cor(x, y)

cor.test(x, y)

cor(df)
```

### $t$-test

```{r}
#| eval: false
t.test()
```

### ANOVA

Sometimes the function that computes a model doesn't tell us everything we typically want to know about that model.

```{r}
#| eval: false
aov(DV ~ IV, data = df)
```

It is often useful to assign the model to a name, and the ask for a summary of the model:

```{r}
#| eval: false
model <- aov(DV ~ IV, data = df)

summary(model)
```

### Regression

```{r}
#| eval: false
regression_model <- lm(DV ~ IV, data = df)

summary(regression_model)
```

### Mixed-effects
